from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin

# Initialize SQLAlchemy
db = SQLAlchemy()

# User Table
class User(db.Model,UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    phone = db.Column(db.String(20), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
    credits = db.Column(db.Float, default=0.0)  # Credits earned by watching ads
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    rides = db.relationship('Ride', backref='user', lazy=True)
    ratings = db.relationship('Rating', backref='user', lazy=True)

    def set_password(self, password):
            self.password_hash = generate_password_hash(password)

    def check_password(self, password):
            return check_password_hash(self.password_hash,password)
    
    @property
    def is_active(self):  # Add this property
            return True  # Modify if you have a logic to deactivate users

# Driver Table
class Driver(db.Model,UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    phone = db.Column(db.String(20), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
    vehicle_id = db.Column(db.Integer, db.ForeignKey('vehicle.id'), nullable=False)
    income_generated = db.Column(db.Float, default=0.0)  # Income generated by driver
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    rides = db.relationship('Ride', backref='driver', lazy=True)
    ratings = db.relationship('Rating', backref='driver', lazy=True)

    def set_password(self, password):
            self.password_hash = generate_password_hash(password)

    def check_password(self, password):
            return check_password_hash(self.password_hash,password)
    
    @property
    def is_active(self):  # Add this property
            return True  # Modify if you have a logic to deactivate users
    
# Vehicle Table
class Vehicle(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    model = db.Column(db.String(100), nullable=False)
    license_plate = db.Column(db.String(20), unique=True, nullable=False)
    capacity = db.Column(db.Integer, nullable=False, default=4)
    driver = db.relationship('Driver', backref='vehicle', uselist=False)

# Ride Table
class Ride(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    driver_id = db.Column(db.Integer, db.ForeignKey('driver.id'), nullable=False)
    pickup_location = db.Column(db.String(200), nullable=False)
    dropoff_location = db.Column(db.String(200), nullable=False)
    request_to_ride = db.Column(db.Boolean, nullable=False, default=False)
    fare = db.Column(db.Float, nullable=False)
    status = db.Column(db.String(50), default='pending')  # pending, completed, canceled
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

# Payment Table
class Payment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    ride_id = db.Column(db.Integer, db.ForeignKey('ride.id'), nullable=False)
    amount = db.Column(db.Float, nullable=False)
    status = db.Column(db.String(50), default='pending')  # pending, completed, failed
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    ride = db.relationship('Ride', backref='payment', uselist=False)

# Rating Table
class Rating(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    ride_id = db.Column(db.Integer, db.ForeignKey('ride.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    driver_id = db.Column(db.Integer, db.ForeignKey('driver.id'), nullable=False)
    rating = db.Column(db.Integer, nullable=False)  # 1-5 stars
    comment = db.Column(db.Text, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    ride = db.relationship('Ride', backref='rating',uselist=False)